#include "executors.h"

#pragma warning(disable : 4996)
#pragma runtime_checks( "", off )

int PtExploitDetectorExecutors::GetRemoteFunctionAddress(unsigned char* remoteFunctionName)
{
    PtExploitDetectorCommon::Xtrace(L"[PtExploitDetectorAgent] Entering to GetRemoteFunctionAddress!");

    if (remoteFunctionName == nullptr)
        return 0;

    int ret = 0;
    DWORD* functionAddress = nullptr;

    std::string functionName((char*)remoteFunctionName);

    if (functionName == "WinExec") {
        functionAddress = (DWORD*)GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), functionName.c_str());
    }

    if (functionAddress != NULL)
        memcpy(remoteFunctionName, &functionAddress, 4);
    else
        PtExploitDetectorCommon::Xtrace(L"[PtExploitDetectorAgent] Error getting function address");

    PtExploitDetectorCommon::Xtrace(L"[PtExploitDetectorAgent] Leaving GetRemoteFunctionAddress!");

    return sizeof(DWORD);
}
