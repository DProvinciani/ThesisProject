#include "../PtExploitDetector/stdafx.h"
#include "../PtExploitDetector/PtExploitDetector.h"
#include "../PtExploitDetector/pt_dump.h"
#include "PtExploitDetectorGUI.h"
#include <QCoreApplication>
#include <QtWidgets/qFileDialog>

// Global app data
GLOBAL_DATA g_appData;

PtExploitDetectorGUI::PtExploitDetectorGUI(QWidget *parent)
    : QMainWindow(parent)
{
    bigSize = false;
    cmdlineInput = "";
    messageToShow = "";
    ui.setupUi(this);
    ui.statusBar->showMessage("");
    connect(ui.buttonOpen, &QPushButton::released, this, &PtExploitDetectorGUI::openExeToTrace);
    connect(ui.buttonAnalyze, &QPushButton::released, this, &PtExploitDetectorGUI::startTrace);
    connect(ui.buttonDump, &QPushButton::released, this, &PtExploitDetectorGUI::dumpTrace);
    plog::init(plog::verbose, "PtExploitDetector.log", 1000000, 5);
}

void PtExploitDetectorGUI::openExeToTrace()
{
    // First we configure the UI aspect
    ui.filePathPanel->clear();

    if (bigSize)
        resizeWindow();

    ui.exploitDataPanel->setVisible(false);
    ui.filePathPanel->setVisible(true);
    ui.filePathPanel->setReadOnly(false);
    
    // Now we are ready to open the dialog and chose the file
    cmdlineInput = QFileDialog::getOpenFileName(this, tr("Open File"), "C://",
        "Executable (*.exe);;Binary Trace (*.bin)");

    ui.filePathPanel->setText(cmdlineInput);
}

void PtExploitDetectorGUI::startTrace()
{
    // First we configure the UI aspect
    if (bigSize)
        resizeWindow();

    ui.exploitDataPanel->setVisible(false);
    ui.filePathPanel->setVisible(true);
    ui.filePathPanel->setReadOnly(true);
    
    // Now we can parse the text and start the trace
    cmdlineInput = ui.filePathPanel->text();
    if (cmdlineInput != "")
    {
        int argc = 0;
        LPWSTR* argv = CommandLineToArgvW(cmdlineInput.toStdWString().c_str(), &argc);

        std::wstring executableTarget = argv[0];
        std::wstring parameters = L"";

        if (argc > 1)
        {
            parameters = argv[1];
            for (unsigned i = 2; i < argc; ++i)
            {
                parameters.append(L" ");
                parameters.append(argv[i]);
            }
        }

        if (executableTarget.empty() || !IsExecutable(executableTarget))
        {
            ui.statusBar->showMessage("Not valid executable");
        }
        else // all was ok... lets configure the trace
        {
            BOOL errorCode = ConfigureTrace(executableTarget, parameters);
            if (errorCode != ERROR_SUCCESS)
            {
                ui.statusBar->showMessage("ERROR! Check in log file");
            }
            else
            {
                // Here we must show the trace results.
                ui.exploitDataPanel->setVisible(true);
                ui.filePathPanel->setVisible(false);
                ui.filePathPanel->setReadOnly(true);

                ui.exploitDataPanel->appendPlainText("Esto es un\n\
ejemplo de resultado\n\
arcilauneauincaoiuec\n\
ejemplo de resultado\n\
arcilauneauincaoiuec\n\
asucnaeuicanoeri\n\
ejemplo de resultado\n\
arcilauneauincaoiuec\n\
asucnaeuicanoeri\n\
asucnaeuicanoeri\n\
ejemplo de resultado\n\
arcilauneauincaoiuec\n\
asucnaeuicanoeri\n\
aiucrhoaruahoeruchraheruh\n");

                if (!bigSize)
                    resizeWindow();
            }
        }
    }
    else
    {
        ui.statusBar->showMessage("ERROR! Select an executable");
    }

    ui.filePathPanel->setReadOnly(false);
}

void PtExploitDetectorGUI::dumpTrace()
{
    // First we configure the UI aspect
    if (bigSize)
        resizeWindow();

    ui.exploitDataPanel->setVisible(false);
    ui.filePathPanel->setVisible(true);
    ui.filePathPanel->setReadOnly(true);

    // Now we are ready to dump the binary trace
    cmdlineInput = ui.filePathPanel->text();
    BOOL errorCode = pt_dump_packets(cmdlineInput.toStdWString().c_str());

    if (errorCode != ERROR_SUCCESS)
        ui.statusBar->showMessage("ERROR! Bad binary trace");
    else
        ui.statusBar->showMessage("Done");

    ui.filePathPanel->setReadOnly(false);
}

void PtExploitDetectorGUI::resizeWindow()
{
    if (bigSize)
    {
        for (unsigned i = 525; i >= 185; i -= 2)
            this->resize(300, i);
    }
    else
    {
        for (unsigned i = 185; i <= 525; i += 2)
            this->resize(300, i);
    }
    bigSize = !bigSize;
}