/**********************************************************************
 *  Windows Intel Processor Trace Exploit Detector
 *  Filename: EntryPoint.cpp
 *  The Control application entry point and startup functions
 *  Last revision: 09/06/2018
 *
 *  Copyright© 2018 Diego Provinciani
 *  UNC - Facultad de Ciencias Exactas Fisicas y Naturales
 *  All right reserved
 **********************************************************************/
#include "stdafx.h"
#include "PtExploitDetector.h"
#include "pt_dump.h"

#define MAX_LOADSTRING 100

 // Global app data
GLOBAL_DATA g_appData;                          // Global data for IntelPt
HINSTANCE hInst;                                // current instance
WCHAR szTitle[MAX_LOADSTRING];                  // The title bar text
WCHAR szWindowClass[MAX_LOADSTRING];            // the main window class name

// Forward declarations of functions included in this code module:
ATOM                MyRegisterClass(HINSTANCE hInstance);
BOOL                InitInstance(HINSTANCE, int);
LRESULT CALLBACK    WndProc(HWND, UINT, WPARAM, LPARAM);
INT_PTR CALLBACK    About(HWND, UINT, WPARAM, LPARAM);

int APIENTRY wWinMain(_In_ HINSTANCE hInstance,
    _In_opt_ HINSTANCE hPrevInstance,
    _In_ LPWSTR    lpCmdLine,
    _In_ int       nCmdShow)
{
    UNREFERENCED_PARAMETER(hPrevInstance);
    UNREFERENCED_PARAMETER(lpCmdLine);

    //system("pause");

    // TODO: Place code here.
    int argc = 0;
    LPWSTR* argv = CommandLineToArgvW(lpCmdLine, &argc);

    std::wstring parameter1 = L"";
    if (argc > 0)
        parameter1.append(argv[0]);

    plog::init(plog::verbose, "PtExploitDetector.log", 1000000, 5);

    if ((argc > 0) && (parameter1.find(L"PtExploitDetector") == std::string::npos)) // We are executing from a cmd
    {
        int iReturn = 0;
        std::wstring executableTarget = L"";
        std::wstring parameters = L"";
        CmdArgsParser switches(argc, argv);

        LOG_INFO << L"Parsing command line parameters";

        // verifying necessary parameters
        if (switches.HasOption(L"-d")) {
            LOG_INFO << L"Dumping binary file";
            LOG_INFO << L"    Input:  " << switches.GetOptionValue(L"-d");
            LOG_INFO << L"    Output: " << switches.GetOptionValue(L"-d");

            if (switches.HasOption(L"-chains")) {
                VPACKETS packets;
                pt_dump_packets(switches.GetOptionValue(L"-d").c_str(), &packets);
            }
            else
                pt_dump_packets(switches.GetOptionValue(L"-d").c_str());
        }
        else if (switches.HasOption(L"-t")) {
            // validating the path and executable to trace
            executableTarget = switches.GetOptionValue(L"-t");
            if (executableTarget.empty() || !IsExecutable(executableTarget)) {
                LOG_ERROR << L"Provided executable is not valid";
                iReturn = -1;
            }
            else { // all was ok... lets configure the trace
                parameters = switches.GetOptionValue(L"-p");
                iReturn = ConfigureTrace(executableTarget, parameters);
            }
        }
        else {
            if (!switches.HasOption(L"-h")) {
                LOG_ERROR << L"Invalid arguments";
                iReturn = -1;
            }

            ShowHelp();
            return iReturn;
        }

        return iReturn;
    }
    else
    {
        // Initialize global strings
        LoadStringW(hInstance, IDS_APP_TITLE, szTitle, MAX_LOADSTRING);
        LoadStringW(hInstance, IDC_PTEXPLOITDETECTOR, szWindowClass, MAX_LOADSTRING);
        MyRegisterClass(hInstance);

        // Perform application initialization:
        if (!InitInstance(hInstance, nCmdShow))
        {
            return FALSE;
        }

        HACCEL hAccelTable = LoadAccelerators(hInstance, MAKEINTRESOURCE(IDC_PTEXPLOITDETECTOR));

        MSG msg;

        // Main message loop:
        while (GetMessage(&msg, nullptr, 0, 0))
        {
            if (!TranslateAccelerator(msg.hwnd, hAccelTable, &msg))
            {
                TranslateMessage(&msg);
                DispatchMessage(&msg);
            }
        }

        return (int)msg.wParam;
    }
}

//
//  FUNCTION: MyRegisterClass()
//
//  PURPOSE: Registers the window class.
//
ATOM MyRegisterClass(HINSTANCE hInstance)
{
    WNDCLASSEXW wcex;

    wcex.cbSize = sizeof(WNDCLASSEX);

    wcex.style = CS_HREDRAW | CS_VREDRAW;
    wcex.lpfnWndProc = WndProc;
    wcex.cbClsExtra = 0;
    wcex.cbWndExtra = 0;
    wcex.hInstance = hInstance;
    wcex.hIcon = LoadIcon(hInstance, MAKEINTRESOURCE(IDI_PTEXPLOITDETECTOR));
    wcex.hCursor = LoadCursor(nullptr, IDC_ARROW);
    wcex.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);
    wcex.lpszMenuName = MAKEINTRESOURCEW(IDC_PTEXPLOITDETECTOR);
    wcex.lpszClassName = szWindowClass;
    wcex.hIconSm = LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_SMALL));

    return RegisterClassExW(&wcex);
}

//
//   FUNCTION: InitInstance(HINSTANCE, int)
//
//   PURPOSE: Saves instance handle and creates main window
//
//   COMMENTS:
//
//        In this function, we save the instance handle in a global variable and
//        create and display the main program window.
//
BOOL InitInstance(HINSTANCE hInstance, int nCmdShow)
{
    hInst = hInstance; // Store instance handle in our global variable

    HWND hWnd = CreateWindowW(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW,
        CW_USEDEFAULT, 0, CW_USEDEFAULT, 0, nullptr, nullptr, hInstance, nullptr);

    if (!hWnd)
    {
        return FALSE;
    }

    ShowWindow(hWnd, nCmdShow);
    UpdateWindow(hWnd);

    return TRUE;
}

//
//  FUNCTION: WndProc(HWND, UINT, WPARAM, LPARAM)
//
//  PURPOSE:  Processes messages for the main window.
//
//  WM_COMMAND  - process the application menu
//  WM_PAINT    - Paint the main window
//  WM_DESTROY  - post a quit message and return
//
//
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
    switch (message)
    {
    case WM_COMMAND:
    {
        int wmId = LOWORD(wParam);
        // Parse the menu selections:
        switch (wmId)
        {
        case IDM_ABOUT:
            DialogBox(hInst, MAKEINTRESOURCE(IDD_ABOUTBOX), hWnd, About);
            break;
        case IDM_EXIT:
            DestroyWindow(hWnd);
            break;
        default:
            return DefWindowProc(hWnd, message, wParam, lParam);
        }
    }
    break;
    case WM_PAINT:
    {
        PAINTSTRUCT ps;
        HDC hdc = BeginPaint(hWnd, &ps);
        // TODO: Add any drawing code that uses hdc here...
        EndPaint(hWnd, &ps);
    }
    break;
    case WM_DESTROY:
        PostQuitMessage(0);
        break;
    default:
        return DefWindowProc(hWnd, message, wParam, lParam);
    }
    return 0;
}

// Message handler for about box.
INT_PTR CALLBACK About(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
{
    UNREFERENCED_PARAMETER(lParam);
    switch (message)
    {
    case WM_INITDIALOG:
        return (INT_PTR)TRUE;

    case WM_COMMAND:
        if (LOWORD(wParam) == IDOK || LOWORD(wParam) == IDCANCEL)
        {
            EndDialog(hDlg, LOWORD(wParam));
            return (INT_PTR)TRUE;
        }
        break;
    }
    return (INT_PTR)FALSE;
}

// Show command line usage
void ShowHelp() {
    LOG_INFO << L"PtExploitDetector usage";
    LOG_INFO << L"PtExploitDetector.exe -h for help";
    LOG_INFO << L"PtExploitDetector.exe -t <executable_to_trace_fullpath>";
    LOG_INFO << L"PtExploitDetector.exe -t <executable_to_trace_fullpath> -p <parameters_for_the_executable>";
    LOG_INFO << L"PtExploitDetector.exe -d <binary_pt_trace_file_to_dump_fullpath>";
    LOG_INFO << L"PtExploitDetector.exe -d <binary_pt_trace_file_to_dump_fullpath> -chains";

    LOG_INFO << L"NOTE: The -p switch is optional. If you are using -p switch to pass more than one";
    LOG_INFO << L"parameter to the executable, please use quotation. ie: -p \"param1 param 2 param 3\"";
}