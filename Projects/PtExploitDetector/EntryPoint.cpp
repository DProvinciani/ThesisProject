/**********************************************************************
 *  Windows Intel Processor Trace Exploit Detector
 *  Filename: EntryPoint.cpp
 *  The Control application entry point and startup functions
 *  Last revision: 09/06/2018
 *
 *  Copyright© 2018 Diego Provinciani
 *  UNC - Facultad de Ciencias Exactas Fisicas y Naturales
 *  All right reserved
 **********************************************************************/
#include "stdafx.h"
#include "PtExploitDetector.h"
#include "pt_dump.h"

 // Global app data
GLOBAL_DATA g_appData;

int wmain(int argc, LPTSTR argv[]) {
    BOOL errorCode = 0;
    std::wstring executableTarget = L"";
    std::wstring parameters = L"";

    std::wcout << std::endl << L"*** PT Exploit Detector ***" << std::endl << std::endl;

    plog::init(plog::verbose, "PtExploitDetector.log", 1000000, 5);
    LOG_INFO << L"Parsing command line parameters";
    CmdArgsParser switches(argc, argv);

    // verifying necessary parameters
    if (switches.HasOption(L"-d")) {
        std::wcout << L"Dumping binary file: " << std::endl;
        std::wcout << L"    Input:  " << switches.GetOptionValue(L"-d") << std::endl;
        std::wcout << L"    Output: " << switches.GetOptionValue(L"-d") << L".log" << std::endl;
        LOG_INFO << L"Dumping binary file";
        LOG_INFO << L"    Input:  " << switches.GetOptionValue(L"-d");
        LOG_INFO << L"    Output: " << switches.GetOptionValue(L"-d");

        if (switches.HasOption(L"-chains")) {
            VPACKETS packets;
            pt_dump_packets(switches.GetOptionValue(L"-d").c_str(), &packets);
        }
        else
            pt_dump_packets(switches.GetOptionValue(L"-d").c_str());
    }
    else if (switches.HasOption(L"-t")) {
        // validating the path and executable to trace
        executableTarget = switches.GetOptionValue(L"-t");
        if (executableTarget.empty() || !IsExecutable(executableTarget)) {
            std::wcout << L"Provided executable is not valid" << std::endl << std::endl;
            LOG_ERROR << L"Provided executable is not valid";
            errorCode = -1;
        }
        else { // all was ok... lets configure the trace
            parameters = switches.GetOptionValue(L"-p");
            errorCode = ConfigureTrace(executableTarget, parameters);
            if (errorCode != ERROR_SUCCESS)
            {
                std::wcout << L"Error starting trace. Check log file for more information" << std::endl << std::endl;
                LOG_ERROR << L"Error starting trace. Check log file for more information";
            }
        }
    }
    else {
        if (!switches.HasOption(L"-h")) {
            std::wcout << L"Invalid arguments." << std::endl << std::endl;
            LOG_ERROR << L"Invalid arguments";
            errorCode = -1;
        }

        ShowHelp();
    }

    return errorCode;
}

// Show command line usage
void ShowHelp() {
    std::wcout << L"PtExploitDetector usage:" << std::endl;
    std::wcout << L"PtExploitDetector.exe -h for help" << std::endl;
    std::wcout << L"PtExploitDetector.exe -t <executable_to_trace_fullpath>" << std::endl;
    std::wcout << L"PtExploitDetector.exe -t <executable_to_trace_fullpath> -p <parameters_for_the_executable>" << std::endl;
    std::wcout << L"PtExploitDetector.exe -d <binary_pt_trace_file_to_dump_fullpath>" << std::endl << std::endl;
    std::wcout << L"PtExploitDetector.exe -d <binary_pt_trace_file_to_dump_fullpath> -chains" << std::endl << std::endl;

    std::wcout << L"NOTE: The -p switch is optional. If you are using -p switch to pass more than one" << std::endl;
    std::wcout << L"parameter to the executable, please use quotation. ie: -p \"param1 param 2 param 3\"" << std::endl;
}